#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

int signalflag = 0;

void catch_sig(int snum) {
	printf("\ncatched %d signal\n", snum);
	signalflag = 1;
}

int main(void) {
	signal (SIGTSTP, catch_sig);
	pid_t childpid1, childpid2;
	char msg1[] = "hello ";
	char msg2[] = "world!";
	char buf[16] = "";
	char all_buf[16] = "";
	int fd[2];

	if (pipe(fd) == -1) {
		perror("pipe");
		return 1;
	}
	if ((childpid1 = fork()) == -1) {
		perror("fork");
		exit(1);
	}
	else if (childpid1 == 0) {
		printf("Child1 pid = %d, ppid = %d, gr = %d;\nwaiting for signal ctrl+Z for 3sec\n", getpid(), getppid(), getgid());
		sleep(3);
		if (signalflag) {
			close(fd[0]);
			write(fd[1], msg1, sizeof(msg1));
		}
	
	}
	else {
		if ((childpid2 = fork()) == -1) {
			perror("fork");
			exit(1);
		}
		else if (childpid2 == 0) {
			printf("Child2 pid = %d, ppid = %d, gr = %d;\nwaiting for signal ctrl+Z for 3sec\n", getpid(), getppid(), getgid());
			sleep(3);
			if (signalflag) {
				close(fd[0]);
				write(fd[1], msg2, sizeof(msg2));
			}
		}
		else {
			printf("parentid = %d\n", getpid());
			close(fd[1]);
			read(fd[0], all_buf, sizeof(buf));
			read(fd[0], buf, sizeof(buf));
			strncat(all_buf, buf, sizeof(buf));
			printf("parent: %s\n", all_buf);
			
			int status;
			pid_t child_pid = wait(&status);
			printf("child has finished: PID = %d\n", child_pid);
			if (WIFEXITED(status))
				printf("exit normal, code = %d\n", WEXITSTATUS(status));
			else
				printf("child terminated not normal\n");

			child_pid = wait(&status);
			printf("child has finished: PID = %d\n", child_pid);
			if (WIFEXITED(status))
				printf("exit normal, code = %d\n", WEXITSTATUS(status));
			else
				printf("child terminated not normal\n");

			return 0;
		}
	}
}

//will write to pipe if ctrl+z pressed in 3 seconds
